#ifndef AGENTS_H
#define AGENTS_H
#include "problemNode.h"
#include "action.h"

class agentS
{
    public:
        virtual string toString(){ return "Abstract Agent Search"; }

        virtual action* searchSolution(problemNode* ProblemNode) = 0;
        /**
            This function will initlize a fringe with the start Node;
            It will then enter into loop until the fringe is empty.
            During each iteration the algorithm will get a node out of
            fringe, expand the node to generate all successors of this node
            by using all possible actions, and put these successors on the fringe.

            In a graph Search implementation of this function a list of previously
            expanded nodes will be maintained and this list will be used to avoid
            repeatedly expanding priviously expanded nodes where as in a tree search
            implementation all successors of the node will be expanded.
        */
    private:

        /**
             This class will have one or two private fringes (stack, queue, or
             a priority queue). One of the fringe will be used to store intermediate
             results nodes generated by the algorithm.
         */
};

#endif // AGENTS_H
